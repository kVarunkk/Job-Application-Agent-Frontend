import { createReader } from "@keystatic/core/reader";
import React from "react";
import Markdoc from "@markdoc/markdoc";
import keystaticConfig from "../../keystatic.config";
import { notFound } from "next/navigation";
import BackButton from "@/components/BackButton";
import Link from "next/link";
import { Metadata } from "next";

// Initialize the Keystatic reader to fetch content
const reader = createReader(process.cwd(), keystaticConfig);
type tParams = Promise<{ slug: string }>;
export async function generateMetadata({
  params,
}: {
  params: tParams;
}): Promise<Metadata> {
  const { slug } = await params;
  const post = await reader.collections.posts.read(slug);

  if (!post) {
    return {};
  }

  // Format the date for the description if needed, or just use the title
  //   const publishedDate = post.publishedAt.toLocaleDateString('en-US');
  const metadataBase = new URL("https://gethired.devhub.co.in");

  return {
    // Dynamic title based on the blog post's title
    title: post.title,
    // Dynamic description using the post's title and author
    description: `Read the latest blog post "${post.title}" on GetHired.`,

    // Open Graph for social media sharing
    openGraph: {
      title: post.title,
      description: `Read the latest blog post "${post.title}" on GetHired.`,
      url: `${metadataBase}/blog/${slug}`,
      siteName: "GetHired",
      images: [
        {
          url: `${metadataBase}/opengraph-image.jpg`, // You should generate a custom image for each post if possible
          width: 1200,
          height: 630,
          alt: post.title,
        },
      ],
      locale: "en_US",
      type: "article",
      //   publishedTime: post.publishedAt.toISOString(),
      //   authors: [post.author],
    },

    // Twitter Card for social sharing
    twitter: {
      card: "summary_large_image",
      title: post.title,
      description: `Read the latest blog post "${post.title}" on GetHired.`,
      images: [`${metadataBase}/twitter-image.jpg`], // Use a custom image for the post if available
    },
  };
}

// This function tells Next.js to pre-render all blog posts at build time.
// It fetches all post slugs and creates a static page for each one.
export async function generateStaticParams() {
  const posts = await reader.collections.posts.all();
  return posts.map((post) => ({ slug: post.slug }));
}

export default async function Post({
  params,
}: {
  params: Promise<{ slug: string }>;
}) {
  const finalParms = await params;
  const post = await reader.collections.posts.read(finalParms.slug);

  if (!post) {
    notFound();
  }

  // Parse the Markdoc content
  const { node } = await post.content();
  const errors = Markdoc.validate(node);

  if (errors.length) {
    console.error(errors);
    throw new Error("Invalid content");
  }

  const renderable = Markdoc.transform(node);

  // Use a helper function to format the date
  // const formatDate = (date: Date) => {
  //   return date.toLocaleDateString("en-US", {
  //     year: "numeric",
  //     month: "long",
  //     day: "numeric",
  //   });
  // };

  return (
    <div className="mx-auto  mb-12 max-w-3xl px-4">
      {/* This is a standard h1 tag for your page title. It's not part of the rendered Markdoc content.
       */}
      <BackButton />
      <h1 className="text-5xl leading-[3.5rem] font-bold mt-4">{post.title}</h1>
      {/* <p className="mt-2 text-lg text-gray-500">
        By {post.author} on {formatDate(post.publishedAt)}
      </p> */}

      {/* The 'prose' class from the @tailwindcss/typography plugin is used to style the
        raw HTML generated by Markdoc. We're using 'prose-xl' to increase the font 
        size and line height as you requested.
      */}
      <div className="prose prose-xl mt-8 leading-8 text-lg !text-primary prose-headings:text-primary prose-strong:text-primary">
        {Markdoc.renderers.react(renderable, React)}
      </div>

      <hr className="my-8" />
      <Link href={`/blog`} className="text-primary hover:underline">
        Back
      </Link>
    </div>
  );
}
